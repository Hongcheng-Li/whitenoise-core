(function() {var implementors = {};
implementors["az"] = [];
implementors["rug"] = [{"text":"impl CheckedCast&lt;i8&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;i8&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;i16&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;i16&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;i32&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;i32&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;i64&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;i64&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;i128&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;i128&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;isize&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;isize&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;u8&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;u8&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;u16&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;u16&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;u32&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;u32&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;u64&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;u64&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;u128&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;u128&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;usize&gt; for Integer","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;usize&gt; for &amp;'_ Integer","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;Integer&gt; for f32","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;Integer&gt; for f64","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;Integer&gt; for Round&lt;f32&gt;","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;Integer&gt; for Round&lt;f64&gt;","synthetic":false,"types":[]},{"text":"impl CheckedCast&lt;Integer&gt; for Float","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; CheckedCast&lt;Integer&gt; for &amp;'_ Float","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()